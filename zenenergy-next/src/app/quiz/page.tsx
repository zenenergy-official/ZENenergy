'use client'

import { useState } from 'react'
import Head from 'next/head'
import Link from 'next/link'

type QuizOption = {
  text: string
  value: 'energy' | 'calm' | 'balance' | 'flow'
}

type QuizQuestion = {
  question: string
  options: QuizOption[]
}

type QuizResult = {
  title: string
  icon: string
  description: string
  products: string[]
}

export default function QuizPage() {
  const [currentQuestion, setCurrentQuestion] = useState(0)
  const [answers, setAnswers] = useState<('energy' | 'calm' | 'balance' | 'flow')[]>([])
  const [selectedOption, setSelectedOption] = useState<number | null>(null)
  const [showResult, setShowResult] = useState(false)
  const [result, setResult] = useState<QuizResult | null>(null)

  const quizQuestions: QuizQuestion[] = [
    {
      question: "–©–æ –¥–ª—è —Ç–µ–±–µ —Å–ø–æ—Ä—Ç ‚Äî –º–µ–¥–∏—Ç–∞—Ü—ñ—è —á–∏ –∑–º–∞–≥–∞–Ω–Ω—è?",
      options: [
        { text: "–ú–µ–¥–∏—Ç–∞—Ü—ñ—è - —Ü–µ —á–∞—Å –¥–ª—è —Å–µ–±–µ", value: "calm" },
        { text: "–ó–º–∞–≥–∞–Ω–Ω—è - –ª—é–±–ª—é –≤–∏–∫–ª–∏–∫–∏", value: "energy" },
        { text: "–ü–æ—î–¥–Ω–∞–Ω–Ω—è —Ç–æ–≥–æ –π —ñ–Ω—à–æ–≥–æ", value: "balance" }
      ]
    },
    {
      question: "–¢–∏ –±—ñ–ª—å—à–µ –µ–Ω–µ—Ä–≥—ñ—è –≤–∏–±—É—Ö—É —á–∏ –ø–ª–∞–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É?",
      options: [
        { text: "–í–∏–±—É—Ö - –ª—é–±–ª—é —ñ–Ω—Ç–µ–Ω—Å–∏–≤", value: "energy" },
        { text: "–ü–ª–∞–≤–Ω–∏–π –ø–æ—Ç—ñ–∫ - —Ü–µ –ø—Ä–æ –º–µ–Ω–µ", value: "flow" },
        { text: "–ó–∞–ª–µ–∂–∏—Ç—å –≤—ñ–¥ –Ω–∞—Å—Ç—Ä–æ—é", value: "balance" }
      ]
    },
    {
      question: "–†–∞–Ω–∫–æ–≤—ñ –ø—Ä–æ–±—ñ–∂–∫–∏ —á–∏ –≤–µ—á—ñ—Ä–Ω—î –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è?",
      options: [
        { text: "–†–∞–Ω–∫–æ–≤—ñ –ø—Ä–æ–±—ñ–∂–∫–∏ - —Ü–µ –∑–∞—Ä—è–¥!", value: "energy" },
        { text: "–í–µ—á—ñ—Ä–Ω—î –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è - –º—ñ–π —Ä–∏—Ç—É–∞–ª", value: "calm" },
        { text: "–Ü–Ω–æ–¥—ñ —Ç–µ, —ñ–Ω–æ–¥—ñ —ñ–Ω—à–µ", value: "balance" }
      ]
    },
    {
      question: "–í–∏–±–µ—Ä–∏ –∫–æ–ª—å–æ—Ä–∏, —è–∫—ñ —Ç–µ–±–µ –∑–∞—Ä—è–¥–∂–∞—é—Ç—å:",
      options: [
        { text: "–ß–µ—Ä–≤–æ–Ω–∏–π/–æ—Ä–∞–Ω–∂–µ–≤–∏–π - –µ–Ω–µ—Ä–≥—ñ—è", value: "energy" },
        { text: "–°–∏–Ω—ñ–π/–∑–µ–ª–µ–Ω–∏–π - —Å–ø–æ–∫—ñ–π", value: "calm" },
        { text: "–§—ñ–æ–ª–µ—Ç–æ–≤–∏–π/–±—ñ—Ä—é–∑–æ–≤–∏–π - –±–∞–ª–∞–Ω—Å", value: "balance" }
      ]
    },
    {
      question: "–û–±–µ—Ä–∏ —Å–≤—ñ–π —ñ–¥–µ–∞–ª—å–Ω–∏–π —Ç–µ–º–ø –∂–∏—Ç—Ç—è:",
      options: [
        { text: "–®–≤–∏–¥–∫–∏–π —Ç–∞ –Ω–∞—Å–∏—á–µ–Ω–∏–π", value: "energy" },
        { text: "–ü–æ–≤—ñ–ª—å–Ω–∏–π —Ç–∞ —Å–≤—ñ–¥–æ–º–∏–π", value: "calm" },
        { text: "–ó–º—ñ–Ω–Ω–∏–π - –∫–æ–ª–∏ —è–∫", value: "flow" }
      ]
    }
  ]

  const quizResults: Record<'energy' | 'calm' | 'balance' | 'flow', QuizResult> = {
    energy: {
      title: "üî• Core Igniter",
      icon: "üî•",
      description: "–¢–∏ - –¥–∂–µ—Ä–µ–ª–æ –µ–Ω–µ—Ä–≥—ñ—ó! –ü–æ—Ç—É–∂–Ω—ñ—Å—Ç—å, –≤–∏–∫–ª–∏–∫–∏ —ñ –¥–∏–Ω–∞–º—ñ–∫–∞ ‚Äî —Ç–≤–æ—è —Å—Ç–∏—Ö—ñ—è.",
      products: ["–ì–∞–Ω—Ç–µ–ª—ñ", "–§—ñ—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç"]
    },
    calm: {
      title: "üå± Calm Charger",
      icon: "üå±",
      description: "–¢–∏ ‚Äî –¥–∂–µ—Ä–µ–ª–æ —Å–ø–æ–∫–æ—é! –Ü–¥–µ–∞–ª—å–Ω—ñ –ø—Ä–∞–∫—Ç–∏–∫–∏ ‚Äî –π–æ–≥–∞, —Ä–æ–∑—Ç—è–∂–∫–∞, –º–µ–¥–∏—Ç–∞—Ü—ñ—ó.",
      products: ["–ô–æ–≥–∞-–º–∞—Ç", "–ê—Ä–æ–º–∞—Å–≤—ñ—á–∫–∏"]
    },
    balance: {
      title: "üåÄ Balance Master",
      icon: "üåÄ",
      description: "–¢–∏ ‚Äî –º–∞–π—Å—Ç–µ—Ä –≥–∞—Ä–º–æ–Ω—ñ—ó. –í —Ç–æ–±—ñ –ø–æ—î–¥–Ω—É—é—Ç—å—Å—è —Ä—ñ–∑–Ω—ñ –ø—ñ–¥—Ö–æ–¥–∏ –¥–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ.",
      products: ["–ú–∞—Å–∞–∂–Ω–∏–π —Ä–æ–ª–∏–∫", "–§—ñ—Ç–Ω–µ—Å-–±—Ä–∞—Å–ª–µ—Ç –∑ –º–µ–¥–∏—Ç–∞—Ü—ñ—î—é"]
    },
    flow: {
      title: "‚ö° Flow Pulse",
      icon: "‚ö°",
      description: "–¢–∏ ‚Äî –µ–Ω–µ—Ä–≥—ñ—è —Ä—É—Ö—É! –ì–Ω—É—á–∫—ñ—Å—Ç—å, –ª–µ–≥–∫—ñ—Å—Ç—å, —Ñ–ª–æ—É ‚Äî —Ç–≤–æ—ó —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏.",
      products: ["–ú'—è—á –¥–ª—è —Ä–æ–∑–º–∏–Ω–∫–∏", "–ú–µ–¥–∏—Ç–∞—Ü—ñ—ó –¥–ª—è —Ä—É—Ö—É"]
    }
  }

  const selectOption = (optionIndex: number) => {
    setSelectedOption(optionIndex)
    
    setTimeout(() => {
      const selectedValue = quizQuestions[currentQuestion].options[optionIndex].value
      const newAnswers = [...answers, selectedValue]
      setAnswers(newAnswers)
      setSelectedOption(null)
      
      if (currentQuestion < quizQuestions.length - 1) {
        setCurrentQuestion(currentQuestion + 1)
      } else {
        calculateResult(newAnswers)
        setShowResult(true)
      }
    }, 500)
  }

  const calculateResult = (answers: ('energy' | 'calm' | 'balance' | 'flow')[]) => {
    const resultCounts = {
      energy: 0,
      calm: 0,
      balance: 0,
      flow: 0
    }
    
    answers.forEach(answer => {
      resultCounts[answer] += 1
    })

    let maxCount = 0
    let finalResult: keyof typeof quizResults = 'balance'

    for (const [key, value] of Object.entries(resultCounts)) {
      if (value > maxCount) {
        maxCount = value
        finalResult = key as keyof typeof quizResults
      }
    }

    setResult(quizResults[finalResult])
  }

  const progress = showResult ? 100 : ((currentQuestion + 1) / quizQuestions.length) * 100;

  return (
    <>
      <Head>
        <title>ZENenergy Quiz</title>
        <meta name="description" content="–ü—Ä–æ–π–¥—ñ—Ç—å –Ω–∞—à —Ç–µ—Å—Ç, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å–≤—ñ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–∏–π –ø—Ä–æ—Ñ—ñ–ª—å" />
        <link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" />
      </Head>

      <div className="quiz-container">
        <div className="quiz-progress">
          <div 
            className="quiz-progress-bar" 
            style={{ width: `${progress}%` }}
          ></div>
        </div>
        
        {!showResult ? (
          <div className={`quiz-question ${!showResult ? 'active' : ''}`}>
            <h3>{quizQuestions[currentQuestion].question}</h3>
            <div className="quiz-options">
              {quizQuestions[currentQuestion].options.map((option, index) => (
                <div
                  key={index}
                  className={`quiz-option ${selectedOption === index ? 'selected' : ''}`}
                  onClick={() => selectOption(index)}
                >
                  {option.text}
                </div>
              ))}
            </div>
            <Link href="/" className="back-button">
              –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </Link>
          </div>
        ) : (
          <div className={`quiz-result ${showResult ? 'active' : ''}`}>
            <div className="result-icon">{result?.icon}</div>
            <h3 className="result-title">{result?.title}</h3>
            <p className="result-description">{result?.description}</p>
            <div className="result-products font-weight: 700">
              <h4 className='font-bold'>–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω—ñ –ø—Ä–æ–¥—É–∫—Ç–∏:</h4>
              <ul>
                {result?.products.map((product, index) => (
                  <li key={index}>{product}</li>
                ))}
              </ul>
            </div>
            <Link href="/" className="back-button">
              –ù–∞ –≥–æ–ª–æ–≤–Ω—É
            </Link>
          </div>
        )}
      </div>
    </>
  )
}